test_y = test[,14]
train_x
# load and look at the data
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F, na.rm=TRUE)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F, na.rm=FALSE)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
splitPerc = .85
trainIndices = sample(1:dim(lifeExpectancy)[1],round(splitPerc * dim(lifeExpectancy)[1]))
train = lifeExpectancy[trainIndices,]
test = lifeExpectancy[-trainIndices,]
str(rrain)
str(train)
train_x = train[, -4]
train_x = scale(train_x)[,]
# Check VIF for all variables excluding Country
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
splitPerc = .85
trainIndices = sample(1:dim(lifeExpectancy)[1],round(splitPerc * dim(lifeExpectancy)[1]))
train = lifeExpectancy[trainIndices,]
test = lifeExpectancy[-trainIndices,]
train <- na.omit(train)
train_x = train[, -4]
train_x = scale(train_x)[,]
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <-  na.omit(lifeExpectancy)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -4]
train_x = scale(train_x)[,]
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
str(lifeExpectancy)
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectanty <- lifeExpectanty[,-c(1,3)]
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectanty[,-c(1,3)]
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <-  na.omit(lifeExpectancy)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
str(train)
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Boston housing test data prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-medv", "predicted-medv"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
################################################################################
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Boston housing test data prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
model = knnreg(Life.expectancy ~ ., data = lifeExpectancy)
model
str(model)
knnmodel = knnreg(Life.expectancy ~ ., data = lifeExpectancy)
pred_y = predict(knnmodel, data.frame(test_x))
model
plot(model)
model = knnreg(Life.expectancy ~ ., data = lifeExpectancy)
plot(model)
model
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
str(lifeExpectancy)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,17,18,19,20)]
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
str(train)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,17,18,19,20)]
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
str(train)
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,17,18,19,20)]
str(lifeExpectancy)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
str(lifeExpectancy)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]
lifeExpectancy <-  na.omit(lifeExpectancy)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
str(lifeExpectancy)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]
lifeExpectancy <-  na.omit(lifeExpectancy)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
pred_y
# Check assumptions
print(data.frame(test_y, pred_y))
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
model = knnreg(Life.expectancy ~ ., data = lifeExpectancy)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]
str(lifeExpectancy)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]
lifeExpectancy <-  na.omit(lifeExpectancy)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,c(-1,-3,-6,-17,-19)]                             # remove high VIF variables
str(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,c(-1,-3,-6,-17,-19)]                          # remove high VIF variables
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
# plot knn regression
x = 1:length(test_y)
plot(x, test_y, col = "red", type = "l", lwd=2,
main = "Life Expectancy Test Data Prediction")
lines(x, pred_y, col = "blue", lwd=2)
legend("topright",  legend = c("original-lifeExpectancy", "predicted-lifeExpectancy"),
fill = c("red", "blue"), col = 2:3,  adj = c(0, 0.6))
grid()
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3)]                                      # remove catigorical variables - Best
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
lifeExpectancy <- read.csv("Life Expectancy Data.csv", header = T)
lifeExpectancy <- lifeExpectancy[,-c(1,3,6,7,9,12,14,17,18,19,20)]              # linear regression model variables - Middle
lifeExpectancy <-  na.omit(lifeExpectancy)
set.seed(12)
# make the train and test sets
indexes = createDataPartition(lifeExpectancy$Life.expectancy, p = .85, list = F)
train = lifeExpectancy[indexes, ]
test = lifeExpectancy[-indexes, ]
train_x = train[, -2]
train_x = scale(train_x)[,]
train_y = train[,2]
test_x = test[, -2]
test_x = scale(test[,-2])[,]
test_y = test[,2]
# knn reg model
knnmodel = knnreg(train_x, train_y)
str(knnmodel)
pred_y = predict(knnmodel, data.frame(test_x))
# Check assumptions
print(data.frame(test_y, pred_y))
mse = mean((test_y - pred_y)^2)
mae = caret::MAE(test_y, pred_y)
rmse = caret::RMSE(test_y, pred_y)
cat("MSE: ", mse, "MAE: ", mae, " RMSE: ", rmse)
